"Simon Willison":http://simonwillison.net "argues":http://simonwillison.net/2008/Aug/12/exposure/ that the iPhone app, Exposure, behaves "suspiciously" because it uses an embedded web view for users to log into to their Flickr/Yahoo accounts using OAuth. 

The crux of his argument is that the embedded web view makes it impossible for users to tell if they are logging into the genuine Yahoo OAuth website or a phishing site. "He cites Pownce":http://simonwillison.net/2008/Aug/12/reviews/ as a better implementation because it opens the authentication page in Safari, which has lead to complaints/negative reviews from users due to the interruption of having to exit the Pownce app, sign in in Safari, then return to the Pownce app.

Whilst I can see his point about the transparency of using Safari directly, I'm not convinced that it's worth compromising on the end-user experience to attain some kind of technical compliance with a protocol that most users haven't heard of nor care about. More to the point, I'm not convinced this is as big a security issue as is being made out.

Ultimately, security often boils down to trust. Do you trust Service X with your credentials and personal information? If the answer is no, then you should not use Service X. 

Using an embedded web view in the way that Exposure does isn't really any different from a native login UI using iPhone interface widgets - without the source code to that application you have absolutely now way of knowing what that app is doing with your credentials. Most of the service-based iPhone apps that I use have a native iPhone login screen - NetNewsWire, Twitter etc. Am I wary of inputting my login details, despite the fact that they could be doing anything with them? No, because I trust the developers of these apps with my credentials (in the same way that I trust them with the same data when I use NewsGator or Twitter.com).

By passing users over to Safari to login - despite the transparency - all they are really doing is shifting the burden of trust on to the login provider and damaging the user experience overall.